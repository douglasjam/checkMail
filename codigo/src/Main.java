
import com.sun.java.swing.plaf.windows.WindowsLookAndFeel;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;


public class Main extends javax.swing.JFrame {

    private Mail gerenciaEmail;

    /** Creates new form Main */
    public Main() throws UnsupportedLookAndFeelException {
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
            SwingUtilities.updateComponentTreeUI(this);
        } catch (Exception e) {
            e.printStackTrace();
        }
        initComponents();
        gerenciaEmail = new Mail();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCarregarEmails = new javax.swing.JLabel();
        txtPathListaEmails = new javax.swing.JTextField();
        btnFiltrarEmails = new javax.swing.JButton();
        lblAondeSalvar = new javax.swing.JLabel();
        txtPathSaida = new javax.swing.JTextField();
        btnSalvarEm = new javax.swing.JButton();
        pbPorcentagem = new javax.swing.JProgressBar();
        btnCarregarListaEmails = new javax.swing.JButton();
        scrollLog = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();
        lblPorcentagem = new javax.swing.JLabel();
        txtPathListaSMTP = new javax.swing.JTextField();
        lblCarregarSMTP = new javax.swing.JLabel();
        btnCarregarListaSMTP = new javax.swing.JButton();
        btnHelpEmails = new javax.swing.JButton();
        btnHelpSMTP = new javax.swing.JButton();
        lblListaSMTP = new javax.swing.JLabel();
        lblValidosInvalidos = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Filtrador de E-mails");
        setResizable(false);

        lblCarregarEmails.setText("Selecione a lista de e-mails a verificar a disponibilidade:");

        txtPathListaEmails.setEditable(false);

        btnFiltrarEmails.setText("FiltrarEmails");
        btnFiltrarEmails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltrarEmailsActionPerformed(evt);
            }
        });

        lblAondeSalvar.setText("Selecione aonde salvar a saída da disponibilidade:");

        txtPathSaida.setEditable(false);

        btnSalvarEm.setText("Salvar em");
        btnSalvarEm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarEmActionPerformed(evt);
            }
        });

        btnCarregarListaEmails.setText("Carregar");
        btnCarregarListaEmails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarregarListaEmailsActionPerformed(evt);
            }
        });

        txtLog.setColumns(20);
        txtLog.setEditable(false);
        txtLog.setRows(5);
        scrollLog.setViewportView(txtLog);

        lblPorcentagem.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPorcentagem.setText("E-mails verificados: 0/0");

        txtPathListaSMTP.setEditable(false);

        lblCarregarSMTP.setText("Selecione a lista de servidores SMTP a ser utilizada.");

        btnCarregarListaSMTP.setText("Carregar");
        btnCarregarListaSMTP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarregarListaSMTPActionPerformed(evt);
            }
        });

        btnHelpEmails.setText("?");
        btnHelpEmails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpEmailsActionPerformed(evt);
            }
        });

        btnHelpSMTP.setText("?");
        btnHelpSMTP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpSMTPActionPerformed(evt);
            }
        });

        lblListaSMTP.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblListaSMTP.setText("Lista SMTP: 0");

        lblValidosInvalidos.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblValidosInvalidos.setText("E-mails Válidos: 0 - E-mails Inválidos: 0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblCarregarEmails))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(txtPathListaEmails, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(btnCarregarListaEmails, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(btnHelpEmails))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblCarregarSMTP))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(txtPathListaSMTP, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(btnCarregarListaSMTP, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(btnHelpSMTP))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(pbPorcentagem, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblListaSMTP, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(114, 114, 114)
                        .addComponent(lblPorcentagem, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(btnFiltrarEmails, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(scrollLog, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblValidosInvalidos, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblAondeSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(txtPathSaida, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnSalvarEm, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(lblCarregarEmails)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPathListaEmails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCarregarListaEmails)
                    .addComponent(btnHelpEmails))
                .addGap(11, 11, 11)
                .addComponent(lblCarregarSMTP)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPathListaSMTP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCarregarListaSMTP)
                    .addComponent(btnHelpSMTP))
                .addGap(6, 6, 6)
                .addComponent(pbPorcentagem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblListaSMTP)
                    .addComponent(lblPorcentagem))
                .addGap(6, 6, 6)
                .addComponent(btnFiltrarEmails)
                .addGap(11, 11, 11)
                .addComponent(scrollLog, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(lblValidosInvalidos)
                .addGap(6, 6, 6)
                .addComponent(lblAondeSalvar)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(txtPathSaida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnSalvarEm))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCarregarListaEmailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarregarListaEmailsActionPerformed
        JFileChooser chooser = new JFileChooser(new File("."));
        chooser.setDialogTitle("Selecione a lista de emails a carregar");
        chooser.setFileFilter(new FileNameExtensionFilter(".txt", "txt"));
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                txtPathListaEmails.setText(chooser.getSelectedFile().getPath());
                gerenciaEmail.readMailFiles(txtPathListaEmails.getText());

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this,
                        "Não foi possível carregar a lista de e-mails.\n\n"
                        + "Verifique se a mesma obedece a sintaxe:\n\n"
                        + "email@provedor.com,senha\nemail@provedor.com,senha",
                        "Erro ao carregar a lista de e-mails.",
                        JOptionPane.ERROR_MESSAGE);
                txtPathListaEmails.setText("");
            }
            lblPorcentagem.setText("E-mails verificados: 0/" + gerenciaEmail.getMailsList().size());
            pbPorcentagem.setMinimum(0);
            pbPorcentagem.setMaximum(gerenciaEmail.getMailsList().size());
            pbPorcentagem.setValue(0);
        }
    }//GEN-LAST:event_btnCarregarListaEmailsActionPerformed

    private void btnSalvarEmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarEmActionPerformed
        if (!txtLog.getText().equals("")) {
            JFileChooser chooser = new JFileChooser(new File("."));
            chooser.setDialogTitle("Salvar lista de emails validos em ");
            chooser.setFileFilter(new FileNameExtensionFilter(".csv", "csv"));
            int returnVal = chooser.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                txtPathSaida.setText(chooser.getSelectedFile().getPath().contains(".csv") ? chooser.getSelectedFile().getPath() : chooser.getSelectedFile().getPath() + ".csv");
                try {
                    // Create file 
                    FileWriter fstream = new FileWriter(txtPathSaida.getText());
                    BufferedWriter out = new BufferedWriter(fstream);
                    out.write(txtLog.getText());
                    //Close the output stream
                    out.close();
                    JOptionPane.showMessageDialog(this,
                            "Seu arquivo foi salvo com sucesso!",
                            "Arquivo salvo com sucesso!.",
                            JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {//Catch exception if any
                    JOptionPane.showMessageDialog(this,
                            "Não foi possível gravar o arquivo de saída. Erro: "
                            + e.getMessage(),
                            "Erro ao gravar o arquivo de saida.",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "É necessário filtrar algum arquivo antes de salvar ",
                    "Erro ao gravar o arquivo de saida.",
                    JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnSalvarEmActionPerformed

    private void btnFiltrarEmailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltrarEmailsActionPerformed

        this.setEnabled(false);
        
        lblPorcentagem.setText("E-mails verificados: 0/" + gerenciaEmail.getMailsList().size());
        pbPorcentagem.setMinimum(0);
        pbPorcentagem.setMaximum(gerenciaEmail.getMailsList().size());
        pbPorcentagem.setValue(0);


        if (gerenciaEmail.getMailsList().isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "A lista de e-mails não foi carregada ou está vazia,\n"
                    + " não será possível continuar a operação.",
                    "Lista de e-mails vazia.",
                    JOptionPane.ERROR_MESSAGE);
            this.setEnabled(true);

        } else if (gerenciaEmail.getSmtpList().isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "A lista de servidores não foi carregada ou está vazia,\n"
                    + " não será possível continuar a operação.",
                    "Lista de servidores vazia.",
                    JOptionPane.ERROR_MESSAGE);
            this.setEnabled(true);
        } else {

            txtLog.setText("");
            Thread t = new Thread(new Runnable() {

                public void run() {
                    try {
                        int validos = 0;
                        int invalidos = 0;

                        for (MailObject email : gerenciaEmail.getMailsList()) {
                            if (gerenciaEmail.processEmail(email)) {
                                validos++;
                            } else {
                                invalidos++;
                            }

                            lblPorcentagem.setText("E-mails verificados: " + (validos + invalidos) + "/" + gerenciaEmail.getMailsList().size());
                            pbPorcentagem.setValue(validos + invalidos);
                            txtLog.setText(txtLog.getText() + email.toString() + "\n");
                            lblValidosInvalidos.setText("E-mails Válidos: " + validos + " - E-mails Inválidos: " + invalidos);

                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            });

            t.start();
            //p.show();
        }

        this.setEnabled(true);
        this.requestFocus();

    }//GEN-LAST:event_btnFiltrarEmailsActionPerformed

    private void btnCarregarListaSMTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarregarListaSMTPActionPerformed
        JFileChooser chooser = new JFileChooser(new File("."));
        chooser.setDialogTitle("Selecione a lista de emails a carregar");
        chooser.setFileFilter(new FileNameExtensionFilter(".txt", "txt"));
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                txtPathListaSMTP.setText(chooser.getSelectedFile().getPath());
                gerenciaEmail.readSMTPList(txtPathListaSMTP.getText());
                lblListaSMTP.setText("Lista SMTP: " + gerenciaEmail.getSmtpList().size());

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this,
                        "Não foi possível carregar a lista de servidores SMTP.\n\n"
                        + "Verifique se a mesma obedece a sintaxe:\n\n"
                        + "smtp.servidor.com,tag\n"
                        + "smtp.servidor.com,tag\n"
                        + "smtp.gmail.com;gmail.com;google.com\n"
                        + "smtp.live.com;hotmail.com,msn.com\n",
                        "Erro ao carregar a lista de servidores.",
                        JOptionPane.ERROR_MESSAGE);
                txtPathListaSMTP.setText("");
            }
            lblPorcentagem.setText("E-mails verificados: 0/" + gerenciaEmail.getMailsList().size());
        }
    }//GEN-LAST:event_btnCarregarListaSMTPActionPerformed

    private void btnHelpEmailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpEmailsActionPerformed
        JOptionPane.showMessageDialog(this,
                "Exemplo de preenchimento do arquivo. <email>,<senha>\n\n"
                + "tucsonxp@yahoo.com.br, pxnoscut\n"
                + "tucsonxp@hotmail.com, pxnoscut\n"
                + "teste@yahoo.com.br,aod27",
                "Exemplo de preenchimento do arquivo.",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnHelpEmailsActionPerformed

    private void btnHelpSMTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpSMTPActionPerformed
        JOptionPane.showMessageDialog(this,
                "Exemplo de preenchimento do arquivo. <servidor>,<tags[]>\n\n"
                + "smtp.gmail.com,gmail.com,google.com\n"
                + "smtp.live.com,hotmail.com\n"
                + "smtp.mail.yahoo.com.br,yahoo.com.br",
                "Exemplo de preenchimento do arquivo.",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnHelpSMTPActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    new Main().setVisible(true);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCarregarListaEmails;
    private javax.swing.JButton btnCarregarListaSMTP;
    private javax.swing.JButton btnFiltrarEmails;
    private javax.swing.JButton btnHelpEmails;
    private javax.swing.JButton btnHelpSMTP;
    private javax.swing.JButton btnSalvarEm;
    private javax.swing.JLabel lblAondeSalvar;
    private javax.swing.JLabel lblCarregarEmails;
    private javax.swing.JLabel lblCarregarSMTP;
    private javax.swing.JLabel lblListaSMTP;
    private javax.swing.JLabel lblPorcentagem;
    private javax.swing.JLabel lblValidosInvalidos;
    private javax.swing.JProgressBar pbPorcentagem;
    private javax.swing.JScrollPane scrollLog;
    private javax.swing.JTextArea txtLog;
    private javax.swing.JTextField txtPathListaEmails;
    private javax.swing.JTextField txtPathListaSMTP;
    private javax.swing.JTextField txtPathSaida;
    // End of variables declaration//GEN-END:variables
}
